// Инструменты:
База данны sqlite как кроссплатформенная, не требующая установки система.
Dbeaver версии 22.05 — универсальный клиент для работы с БД (sqlite, postgresql и т.д).
QtCreator версии 4.11.0 — среда разработки.
Кроссплатформенная библиотека C++ Qt5.12 (компилятор GCC 9.3)
ОС Ubuntu 20.04

// Перечень файлов проекта:
music_store.sqlite - файл БД sqlite.
er.png — схема er модели БД.
music_store_dump.sql — дамп БД со скриптами созданием таблиц и тестовыми данными.
Interface1..3.png — скриншоты программы.
db.txt — техническое задание.
Readme.txt — этот файл.
Папка Music_store — файлы проекта.
Music_store.pro — файл проекта.
mainwindow(h,cpp,ui) — главная форма программы.
Cdebug.h — вспомогательный файл отладки.
Sqlhelper.h — вспомогательный файл для работы с БД. Здесь запросы, процедуры заполнения виджетов.
sqlstandartitemmodel(h,cpp) — собственная модель для работы с БД. Предназначена для работы с большим количеством строк. Отличается от стандартных, тем, что загружает данные в отдельном потоке (в фоновом режиме) т.е. «не подвешивает» интерфейс. Для непосредственного извлечения данных и передачи в модель, имеется класс sqlworker(h,cpp), который и работает в отдельном потоке.
Уточнение: во время загрузки, данные добавляются по 512 строк (возможна настройка). Скорость выборки зависит от «железа» и удалённости сервера. Как правило, несколько млс. на выборке в миллион строк. 

// Что реализовано/не реализовано(в разработке):
Интерфейс приложения, и чтение данных из базы реализованы полностью. Все компоненты снабжены всплывающим меню. Всего имеется 3 вкладки.

1.(Music Band) Работа с ансамблями (группами). 
	Выбор группы из списка, автоматическое отображение состава и треков группы с альбомами (если трек был представлен в альбоме). Имеется фильтр по трекам. Добавление/удаление групп, участников и треков — в разработке.

2.(Albums) Компании, выпущенные альбомы, релизы (альбом может быть перевыпущен, если пользуется успехом). 
	Здесь, при выборе компании-производителя из списка, отображается список альбомов с композициями, оптовый продавец и даты релизов. Адрес компании отображается в сплывающем меню. Добавление/удаление даты — не реализовано. Остальной функционал реализован и в работе: добавление/удаление альбомов, композиций с сохранением в БД. Для удобного редактирования треков альбома, у правого края имеется соответствующая панель (можно двигать спинбоксом) со всеми композициями в базе, фильтром и соответствующими кнопками. 

3.(Shop) Таблицы склад, магазин и отчёты.
	Таблица «Склад» отображает имеющиеся у магазина альбомы, с датой релиза, поступления на склад, размером партии, оптовой и розничной ценой (указана в условных единицах).
	Таблица «Продажа» по сути список чеков. Здесь альбом, дата продажи, по какой цене, количество проданных штук и общая цена. Управление таблицами в разработке.
	Область «Отчёт» - примитивный вариант формирования отчётов — в строку вводится год а кнопки выдают информацию в текстовое поле справа. На данный момент в базе имеется информация о 2020 годе. Всего два отчёта: «Лидеры по количеству продаж» и «Лидеры по количеству выручки». Оба выдают трех лучших из остальных. 
  
Уточнение 1: кнопки с нереализованным функционалом выдают сообщение «Function under construction». Это сделано намерено, чтобы не создавать у пользователя впечатление «зависшей/не работающей» программы и необходимости ждать ответа интерфейса или окончание длительной операции с данными.   
Уточнение 2: в БД альбом состоит из 2х таблиц album и album_matrix, которые соединены по ключу с директивой «ON DELETE CASCADE». Поэтому, удаление записи об альбоме (album_matrix) приведёт к каскадному удалению записей о треках этого альбома в таблице «album». Сами треки хранятся в таблице singles и в данной ситуации не удаляются для возможности последующего использования в других альбомах.
Подобным образом реализуется функционал для сущностей «Группа» - «Музыкант» - «Роль в группе». На данный момент в программе не представлен.

// База данных

Уточнения и упрощения:
1. Все музыканты принадлежат какой-то группе. Музыкант может принадлежать только 1й группе.
2. У музыканта может быть несколько ролей в группе (напр. руководитель и клавишник).
3. Автором произведения может быть только группа.
4. На диске могут быть записаны несколько групп.

!!! Информация в БД является тестовой. Все совпадения с названиями групп, персонами, песнями и альбомами случайны или не существуют в реальном мире. Данные частично взяты из открытых источников, а частично (например ФИО) сгенерированы для демонстрации работы программы.

// -----------------------------------------------------

Таблицы:
artist - список музыкантов с принадлежностью к группам
artist_role - роль (обязанности) музыканта в группе
art_band_role - связь много ко многим - роль артиста в группе (может быть несколько)  
band - ансамбль с наименованием и типом
band_type - типы ансамблей с описанием
company - компании с адресами и статусом (производитель/продавец)
singles - композиции (произведения) с указанием автора (ссылка на группу)  
album_matrix - матрица для печати пластинок с уникальным номером, компанией и названием пластинки
album - экземпляр пластинки с номерами матрицы, произведения и исполнителя
album_release - выпуск на рынок пластинок с указанием даты (YYYY-MM-DD) и оптового поставщика (может быть компанией производителем) 
shop_stock - склад магазина с датой поставки, количеством, оптовой и розничной ценой (trade_price/retail_price)
shop_ticket - чек (фиксация) очередной продажи позиции со склада с датой, ценой и количеством копий пластинки 

// select ----------------------------------------------

1) получить количество музыкальных произведений заданного ансамбля;

    SELECT COUNT(*) as count FROM band b, singles s
    WHERE b.b_id = s.author
    AND band_name = 'Perfect Me';

2) выводить название всех компакт-дисков заданного ансамбля 

    SELECT am.album_name FROM band b, album a, album_matrix am 
    WHERE 1=1 
    AND b.b_id = a.b_id
    AND a.am_id = am.am_id
    AND band_name = 'Hans Zimmer'
    GROUP BY am.am_id;

3.1) самые продаваемые альбомы по убыванию

    SELECT am.album_name, SUM(st.sale_count) as 'total sold' 
    FROM album_matrix am, album_release ar, shop_stock ss, shop_ticket st   
    WHERE 1=1
    AND am.am_id = ar.am_id 
    AND ar.ar_id = ss.ar_id
    AND ss.ss_id = st.ss_id
    AND STRFTIME('%Y',st.sale_date) = '2020' -- STRFTIME('%Y','now') -- текущий год или любой другой, например 2020
    GROUP BY am.am_id 
    ORDER BY 'total_sold'
    
3.2) самые прибыльные альбомы

    SELECT album_name, all_profit from (  
    SELECT am.am_id, am.album_name, ss.date_load, ss.ss_id, st.unit_price, st.sale_count 
        ,SUM((st.unit_price * st.sale_count)) as all_profit  
        FROM album_matrix am, album_release ar, shop_stock ss, shop_ticket st   
        WHERE 1=1
        AND am.am_id = ar.am_id 
        AND ar.ar_id = ss.ar_id
        AND ss.ss_id = st.ss_id
        AND STRFTIME('%Y',st.sale_date) = '2020' -- STRFTIME('%Y','now') -- текущий год или любой другой, например 2020
        GROUP BY am.am_id
    )
    ORDER BY all_profit DESC; 
    
4)
INSERT INTO album(am_id, s_id, b_id) VALUES(0, 0, 0);

5)
INSERT INTO band (band_name, bt_id) VALUES('', 0);

    

// TASK ------------------------------------------------

База данных музыкального магазина. 

Таблицы базы данных
содержат информацию о музыкантах, музыкальных произведе-
ниях и обстоятельствах их исполнения. Нескольких музыкантов,
образующих единый коллектив, называются ансамблем. Это мо-
жет быть классический оркестр, джазовая группа, квартет, квин-
тет и т.д. К музыкантам причисляют исполнителей (играющих
на одном или нескольких инструментах), композиторов, дири-
жеров и руководителей ансамблей.

Кроме того, в базе данных хранится информация о пластинках,
которыми магазин торгует. Каждая пластинка, а точнее, ее на-
клейка, идентифицируется отдельным номером, так что всем ко-
пиям, отпечатанным с матрицы в разное время, присвоены оди-
наковые номера. На пластинке может быть записано несколько
исполнений одного и того же произведения ó для каждого из
них в базе заведена отдельная запись. Когда выходит новая пла-
стинка, регистрируется название выпустившей ее компании (на-
пример, ЕМI), а также адрес оптовой фирмы, у которой магазин
может приобрести эту пластинку. Не исключено, что компанияñ
производитель занимается и оптовой продажей своих пласти-
нок.
Магазин фиксирует текущие оптовые и розничные цены на
каждую пластинку, дату ее выпуска, количество экземпляров,
проданных за прошлый год и в нынешнем году, а также число
еще не распроданных пластинок.

Помимо SQL запросов для создания таблиц базы данных, раз-
работать пакет-интерфейс, позволяющий:
1) получить количество музыкальных произведений заданного ансамбля;
2) выводить название всех компакт-дисков заданного ансамбля;
3) показать лидеров продаж текущего года, то есть названия
компакт-дисков, которые чаще всего покупали в текущем
году;

Остальные запросы для работы интерфейса представлены в файле sqlhelper.h

Предусмотреть разработку триггеров, обеспечивающих каскад-
ные изменения в связанных таблицах.

СУБД - postgresql, mysql или sqlite.
Язык реализации - С++ или python.
